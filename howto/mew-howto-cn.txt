有些收到的 mail 是 HTML 格式，可以在 Summary 下通过 C-c C-e 邮件标题，
打开外部程序来显示。默认是 Mozilla，可以改成 Firefox。但需要注意的是，
必须这些浏览器已经打开了，否则 Mew 是不会帮你打开浏览器再阅读 HTML 邮
件的。

C-C C-e 只支持 Mozilla 和 Firefox，无法支持 Opera。
http://www.mew.org/pipermail/mew-int/2007-June/001814.html

在每个邮件文件夹下（无论是默认的一些 indox、draft等，还是你自己建立的），
都会有一个 .mew-summary 的文件，这个文件其实是保存了邮件显示的信息，比
如是否已读，日期，from，title，body等。如果你在设置过了 summary 显示格
式的变量，比如 mew-summary-form，Mew 只会对新收到的邮件进行新的格式化，
而以前的仍然按照之前的设定。如果希望以前的邮件也显示新的格式，那么请删
除相应文件夹下的 .mew-summary。

我在 customize 里重新格式化的 summary：
 '(mew-summary-form (quote (type (5 date) " " (14 from) " " (4 size) "  " t (50 subj) "|>  " (0 body))))

Mew 有时候会显示 No new message (xxx messages left)，这时候一些邮件仍然在服务器上，没有被 Mew 收取下来，怎么 i 也不行。删除 Mail/.mew-uidl ，并设置 (setq mew-pop-size 0)，就可以收了。但有时候信会重复。
http://www.mew.org/pipermail/mew-int/2003-May/000945.html

======================================================================

快捷键：
{阅读} ->
[C-u] SPC	查看邮件，向下滚一屏，C-u 表示重头开始阅读;
DEL   		向上滚一屏;
RET		打开邮件，向下滚一行;
M-RET/-		向上滚一行;
[C-u] n		下一封邮件，会略过做了某些标记的邮件(比如MIME);
[C-u] p		上一封邮件，同上;
[C-u] j		跳到某一行/message number;

{MIME} ->
.		解析邮件，并重新显示;
:		查看 MIME 结构;
,		以 raw 模式显示邮件;
C-cTAB		以文件模式，只读打开一个邮件;
C-uC-cTAB	以文件模式打开一个邮件;

Mew 默认对邮件的解析做了一些设置，比如最大不超过 10M，对不合标准邮件格
式的解析方式。一旦对邮件 '.'，所有限制都不复存在，都会解析这个邮件。

{收信} ->
i		查信，根据设置收到邮件箱;
s		刷新邮件箱中的邮件;
I		重新收取 T 的邮件;
lc		从远程文件夹收信至本地文件夹;

* POP 用`i'，IMAP 用`s' + `update'
* C-u i，效果是加上与 mew-auto-flush-queue 设置的相反的操作;
* C-u s，选择是否只收邮件头或是全部邮件（IMAP）;

{移动邮件} ->
g

* 如果不是 + 文件夹，那么直接输入其他 proto 就行，比如 %，会自动删除+;

d
u
x
M-u
w
q
Q


Mark ->
U    未读邮件;
M    Multipart 邮件;
S    签名邮件;
E    加密邮件;
T    被截取的邮件，需要按I;
*

======================================================================
Mew 使用必知

Mew 有 6 种模式：
Summary       : 列出和供选择邮件
Virtual mode  : 按线索(Thread)或者 Selection 显示邮件
Message mode  : 显示邮件的正文内容
Draft mode    : 草稿
Header mode   : 修改邮件的头
Addrbook mode : 把发信人信息注册到 Addrbook 里

Mew 中的 mailbox 指 local, POP server, IMAP server, NNTP server 这四类。
Mew 通过 protoFoldName （如 +inbox, $inbox）的方式来访问包含邮件的文件
夹，根据 proto 的不同，可分为本地文件夹和远程文件夹。

本地文件夹主要有：
+inbox  从POP服务器或者本地收信程序收信最先放置的文件夹;
+draft  本地未完成的邮件草稿文件夹
+queue  本地待由SMTP发送的邮件
+postq  本地待由NNTP发送的新闻组邮件

* 本地文件夹里的邮件都是真实在存在于你硬盘上的。
* 用户可以新建许多自己的文件夹，比如 +school等，通常将 +inbox 里的邮件
  归类到其他文件夹的方法称作"refile";
* locale mailbox 应该是指 fetchmail 这种收信程序放置邮件的文件夹，然后
  可以通过 Mew 收信到 +inbox;

远程文件夹主要有：
%inbox               IMAP 服务器上的文件夹，除了inbox还可以有其它;
$inbox               POP 服务器上唯一的文件夹;
-fj.mail.reader.mew  某新闻组服务器上的文件夹;

* 远程文件夹里的邮件是服务端的一份拷贝而已

Mew 允许你同时管理多个邮件账户。

* Mew 中 case + proto 决定一个 world

在一个 world 里将邮件移动到另外的文件夹里，叫 refile。
你可以在 + 的文件夹之间互相移动邮件，但是，因为 $inbox 是唯一的POP文件
夹，所以在POP服务器端移动邮件; - 的新闻组服务器同样无法移动，因为那不
是你的！

不过，你仍然可以从一种协议文件夹 COPY 邮件副本到另一种协议的文件夹，但
这只能是复制到本地的文件夹，比如，从 IMAP 服务器端下载邮件到你的本地
+ 文件夹，这种方法称为"retrieve"，在不同的 world 里。

======================================================================
Mew 快速配置

首先在 ~/.emacs 里加入：
     (autoload 'mew "mew" nil t)
     (autoload 'mew-send "mew" nil t)

     ;; Optional setup (Read Mail menu for Emacs 21):
     (if (boundp 'read-mail-command)
         (setq read-mail-command 'mew))

     ;; Optional setup (e.g. C-xm for sending a message):
     (autoload 'mew-user-agent-compose "mew" nil t)
     (if (boundp 'mail-user-agent)
         (setq mail-user-agent 'mew-user-agent))
     (if (fboundp 'define-mail-user-agent)
         (define-mail-user-agent
           'mew-user-agent
           'mew-user-agent-compose
           'mew-draft-send-message
           'mew-draft-kill
           'mew-send-hook))

* Mew 的其他配置请写在 ~/.mew.el 里

下面的配置适用于仅一个 email 账户，并且使用 POP/IMAP 收信，SMTP 发信。
例如我的邮件地址是：my.email@foobar.com

(setq mew-name "vvoody") ;; I'm vvoody.
(setq mew-user "vvoody")
(setq mew-mail-domain "qq.com") ;; My email is vvoody@qq.com

(setq mew-pop-size 0)
(setq mew-pop-user "vvoody")
(setq mew-pop-server "pop.qq.com")
(setq mew-pop-auth 'pass)

;;(setq mew-proto "%")
;;(setq mew-imap-user "vvoody")  ;; (user-login-name)
;;(setq mew-imap-server "imap.qq.com")    ;; if not localhost

(setq mew-smtp-user "vvoody")
(setq mew-smtp-server "smtp.qq.com")
;(setq mew-smtp-auth-list nil)
(setq mew-imap-header-only t)

* 使用多账户 case 及使用其他程序收信或发信的请参考 Mew Info

======================================================================
密码

之前的配置，在每次收信或者发信时，都需要你输入密码，这样会很烦人。Mew
提供了两种密码机制：
1、(setq mew-user-cached-passwd t)
开启Mew，当你第一次输入 POP 或者 SMTP 密码后，Mew 会将密码保存在内存中，
在一段时间内（默认是20分钟）不再需要输入密码，重启Mew后依然如此。

2、(setq mew-use-master-passwd t)
如果你选择了这种方法，那么第一次（指修改配置后）启动Mew时，会让你输入
一个主密码两次，然后当你第一次 POP 收信或SMTP发信输入密码后，Mew 会将
密码暂存在内存中，当推出Mew时，Mew会把密码加密写入一个文件中。当你下次
启动Mew时，只要输入之前设定的主密码，Mew 就会从文件中把密码解密出来暂
存在内存，以后就不需要输入密码了。

* 把上述任意一句放入 ~/.mew.el 中。都存在的话使用第2种; 主密码输入
  错误，如果第1种配置存在，就采用它，否则什么密码机制不采用;
* PGP 或 S/MIME 也采用如上密码机制;
* Summary 模式下 C-cC-m 修改主密码;
* 暂存在内存中的密码时未加密的;
* (setq mew-passwd-timer-unit 999)
  (setq mew-passwd-lifetime 999)
  这使得直到退出 Mew 前都不需要输入密码;

======================================================================
开启 Mew
----------
M-x mew
* Mew 会根据 mew-auto-get 的设置(t)自动在后台收信，并显示在 Summary Mode

C-uM-x mew
* 根据 mew-auto-get 的相反设置收取信，通常只是进入某文件夹不收信

M-x mew-send
* 开启Mew写信

C-xm
* 如果 mail-user-agent 设置为 Mew，就用开启Mew写信

退出 Mew
----------
<Summary mode>
q       挂起Mew，不会退出;
Q       真正地退出Mew;
C-cC-q  关闭当前某种模式;

<Draft mode / Header mode>
C-cC-q  撤销草稿;

<Addrbook mode>
C-cC-q  

======================================================================
阅读信件

启动Mew进入的是 Sammary mode。
每一行不同字段标明了每封信的信息，它们是：
mark, data type, date, sender, subject, body

* mark 是 '*';
* date type 是 '-', 'M' Mew 自己的记号等;

下面是 Summary mode 下对信件显示操作的一些快捷键：
`SPC'
    从头部(subject)开始显示邮件，每次滚动一屏;

`C-uSPC'
    重新回到头部开始显示邮件;

`DEL'
    上滚一屏，其实应该是 Backspace;

`RET'
    每次向上滚动一行显示邮件;

`M-RET' / `-'
    每次向下滚动一行显示邮件;

`C-n'
    下一行;

`C-p'
    上一行;

`n'
    向下移动并显示，如果它们是信件的一部分、信件被作了'*'标记，或没任何标记的信件;

`C-un'
    向下移动并显示，如果信件被作了'*'标记，或没任何标记的信件;

`p'
    同`n'，只是向上移动;

`C-up'
    同`C-un'，只是向下移动;

`j'
    跳至某一行，根据你输入的行号;

`C-uj'
    跳至某一信件，根据你输入的信件号;

======================================================================
显示 MIME

MIME是对原有e-mail协议的扩展，使得e-mail能够传输多国文字，声音，图像等
等，这类邮件称为 Multipart message。Mew 中 'M' 标记就是指 Multipart
message。

* '-' 标记也是 Multipart 的一种，Mew 6 引入了这种标记。简单来讲就是，
  邮件内容有两种表达形式，一种是纯文本(text/plain)，一种是
  HTML(text/html)。
参考：
http://en.wikipedia.org/wiki/MIME

下面先了解几个控制邮件解析的变量：

* mew-file-max-size
超过 100000 bytes（默认）大小的邮件不会被解析，直接显示原始的内容。

* mew-header-man-length
最大邮件头的长度，默认是100行。

* mew-decode-broken
控制Mew对待无效(invalid)的邮件是宽松的还是保守的。t 表示宽松，nil 表示
保守，默认是t。如果选择了保守，Mew会在 X-Mew 栏里显示信息。

* mew-use-text-body
控制邮件正文的文本部分是否和邮件的头信息（Subject, From等）一起显示。
如果是t（默认），邮件仅有的文本部分或者第一部分是文本的都会和邮件头一
起显示; 如果是nil，它们都显示为一个 multipart。

* mew-use-alternative
处理 Multipart/Alternative。如果是t（默认），则根据
mew-mime-multipart-alternative-list（默认是text/plain）显示内容，默认
就是显示纯文本; 如果是nil，则作为一个 multipart 来显示。

# 如果设成 text/html ，配合 mew-w3m 应该会有不错的效果

* mew-use-text/html
如果是nil，HTML不做分析显示，默认。
如果是t，HTML分析并显示。

* mew-use-text/xml
同 mew-use-text/html

Mew 中 multipart message 的显示格式如下：
     * 03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
      M03/14 Momo-chan      The pictures of Noto      |Attached are the pictu
     B    2  Image/Jpeg                   picture 1                noto1.jpg
     Q    3  Application/Postscript       Note map                 map.ps
       03/15 Neat Sumikawa  Re: wine                  |OK. I vote for Wednesd

03/14 的那封邮件有3个部分，2、3分别显示出来。

跟上面变量相关的是'.'命令，根据不同情况起不同作用：

1) 如果是在邮件本身上执行（非某个部分，下面也是如此），那么Mew 会删除
该邮件的缓存，重新解析并显示;

1a)不管邮件、邮件头有多大，Mew 都会对邮件进行解析;

1b)如果你用':'将邮件的所有部分都显示了出来，那么此时按'.'则是收回显示
这些部分，只留邮件主体;

1c)如果mew-use-text/html是nil，那么此时则会解析邮件的HTML部分并显示;

2) 如果是在邮件的某部分上执行（下面也是如此），这部分重新显示;

2a)光标所处的HTML部分的邮件将重新解析并显示;

* 列出相关命令：

`.'
    解析邮件并重新显示（注意上面的情况）;

`C-u.'
    根据 mew-decode-broken 的相反值解析邮件;

`:'
    同'.'，只是根据 mew-use-alternative 和 mew-use-text-body 的相反设
    置显示;

`C-u:'
    同'C-u.'，只是根据 mew-use-alternative 和 mew-use-text-body 的相反设
    置显示;
    
`,'
    将邮件或某部分的原始格式插入到 Message mode 里;

`C-cTAB'
    以文件形式只读打开邮件;

`C-uC-cTAB'
    以文件形式打开邮件，可写;

***
Mew 中你按SPC/.查看邮件，如果邮件只有一个部分且是文本，或者邮件的第一
个部分是文本，那么它们会和邮件头（Subject, From等等）一起显示，这个是
由 mew-use-text-body 控制的。当然了，':'可以将邮件的各个部分列出来，每
个部分都只有其正文，不会有邮件头。一般来讲，普通邮件用SPC或.查看就可以
了，如果遇到有附件的，或者你想看其HTML版本的，那么此时按':'是很合适的。

======================================================================
签名/加密邮件

      S03/18 Kanda PC shop  A written estimate        |Here is a written esti
      E03/21 Anonymous      Secret message            |

形如这样有'S', 'E' 标记的邮件分别代表签名和加密过的。不过只有在整封邮
件是签名或加密的时候才会显示这个标记，否则只在邮件头的 X-Mew 显示哪些
部分是，如：

     X-Mew: <body> PGP decrypted.
            Good PGP sign "kazu@example.org" COMPLETE

     X-Mew: <body multi> Good PGP sign "kazu@example.org" COMPLETE
     X-Mew: <2 message> PGP decrypted.

被加密的邮件，Mew 会提示你输入你的主密码以打开你的私钥。这里的密码会和
“密码”一节做相同处理，请参考。

被签名的文件，Mew 会自动使用发送者的公钥去验证，无须输入什么密码，自动
完成的。

出错：
如果公钥缺失，Mew 将无法解析邮件，会在 X-Mew 做出提示，如：

     X-Mew: <body multi> No his/her public key. ID = 0x1B8BF431

这时，你可以按 C-cC-f 寻找公钥文件/服务器。

Mew 支持 PGPv2, PGPv5, GNUPG，可以通过在 Summary Mode 里按 C-cC-v 来选
择。如果你想长期使用某种，那么请设置好一下三个变量：
mew-prog-pgp2, mew-prog-pgp5, mew-prog-gpg

* Mew 默认是 mew-prog-pgp
* 不同的 gp 的私钥密码的缓存分别保存
* 过时的 PGP 邮件不会被自动处理，请用 C-cC-z
* 需要对公私钥机制有一定的了解

======================================================================
获取邮件

根据 mew-mailbox-type 的值(mbox, pop, imap)，mbox 和 pop 推荐使用 'i'
来收取新邮件，而 imap 和 新闻组则请用 's'。

* 像 imap 这种直接对远程服务器端文件夹进行操作的，Mew 会在本地建一个缓
  存文件夹，例如%inbox。's' 就是对这个缓存文件夹的更新，去掉远程文件夹
  中不存在的邮件等等操作。

对于 's' 有三种不同的作用范围：
`update'
	追加式地更新 Summary Mode 和 .mew-summary 文件;
  
`all'
	重新构建当前文件夹下的 .mew-summary，并更新 Summary Mode 中的
	显示。本地文件夹中的邮件列表不一致时，用这个来刷新; imap 之类则是重
        新收取对应远程文件夹中的邮件;

`sync'
        仅对远程文件夹有效。删除已经在远程文件夹中不存在的邮件缓存;

* Mew 中你进入任意一个文件夹，Summary Mode 都是列出每个邮件的摘要，如
  下。但 Mew 不会每次进入文件夹就再次生成一遍这个摘要列表，而是将第一
  次生成的结果存放入每个文件夹下的 .mew-summary 文件里。这样，就加快了
  载入速度。当然，你的删除、移动、收信等操作都会及时更新这个文件。

  +draft, +queue, +postq 中 's' 行为默认是 'all'; 其他(本地)文件夹则是
  'update'; imap 这类远程文件夹请用 'sync';

     * 03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
      M03/14 Momo-chan      The pictures of Noto      |Attached are the pictu

* 非常大的邮件通常会被标上'T'，另外IMAP中如果设置了只收取邮件头，也会
  是这样，这时请按'I'来收取完整的信件

快捷键：
`s'
	如上;

`C-us'
        切换只收邮件头或者全部(相关变量 mew-pop-header-only,
	mew-imap-header-only, mew-nntp-header-only)，默认都是 nil

`i'
        收取新邮件到 +inbox，如果 mew-auto-flush-queue 为 t，那么也会
        将 +queue 里的邮件发送出去; 如果在远程文件夹里则会访问 %inbox
        并执行 's' 'update';

`C-ui'
        同'i'，但根据 mew-auto-flush-queue 设置的相反值来决定是否发送
        +queue 里的邮件

`I'
        收取被标记为'T'的邮件的剩余部分，下面都是这种情况：

	如果用在本地文件夹里，retrieve 邮件的方法由 "case" 和
	"mew-mailbox-type" 决定。如果
	`mew-pop-delete'/`mew-imap-delet' 是 't'，那么从 mailbox
	(fetchmail, pop, imap)里删除邮件;

	如果在远程文件夹里，则是收取完整的邮件。

`C-uI'
	同 `I'，但与 `mew-pop-delete' `mew-imap-delete' 设置相反;

`lc'
        拷贝远程文件夹里的邮件到本地文件夹;

======================================================================
浏览其他文件夹

在 Mew 里按 'g' 就能转去别的邮件文件夹。你可以输入文件夹的名字，可以使
用 TAB, SPC 来自动完成名字。如果要切换邮箱的类型，比如从 '+' 到 '%'，
不必删除 '+'，直接输入 '%' 加上邮箱文件夹名即可。

你还可以这样写：

     Folder name (+inbox): home:%inbox

* home 是你其他的邮件账户, `C-cTAB' 可列出所有账号;

另外，也可以按 C-s, C-r 搜索文件夹的名字，快速进入。

* 去到一个不存在的文件夹时，Mew 会问你是否要建立该文件夹，你就可以按自
  己喜好分类邮件;

* "fun/joke" 意思是建立 fun 和 joke 两个父子文件夹;

======================================================================
撰写/回复/转发邮件

* 请在 Summay Mode 里操作

`w'
    写一封全新的邮件，进入Draft mode;

`C-uw'
    对当前邮件的发件人写一封新的邮件，进入Draft mode。原信的 From: 会
    复制到新邮件的 To: 里;

* 详见composing

`W'
    ???
   
* 详见resend
 
`a'
    回复某封邮件，自动填写'To:' 'Cc:';

`C-ua'
    同 'a'，但没有 'Cc:';

`A'
    回复某封邮件，自动填写'To:' 'Cc:'，并插入对原邮件的引用;

`C-uA'
    同 'A'，但没有 'Cc:';

* 详见reply

`f'
    转发邮件，原邮件以附件形式;
`F'
    转发所有标记为'*'的邮件，原邮件以附件形式;

* 详见forward

Mew 中还可以修改邮件。
`E'
    进入 Draft mode 修改邮件;

* 如果你是对+draft, +queue, +postq 里的邮件进行修改，那么被修改的邮件
  的头信息被自动被替换成当前账户(case)的信息，如
  果'mew-case-guess-when-prepared' 是t的话。

`C-uE'
    和E差不多，只是不是用在上面提到的3个文件夹里。被修改的邮件头信息会
    被保留，而不会根据上面提到的那个变量自动填写;

`M-e'
    ???

======================================================================
Summary mode 下有用的命令

`v'
    显示/卷起邮件正文;
    
`_'
    和auto-fill-mode 类似，帮你把邮件的长行自动截行，非常有用！;

`zv'
    如果 To: 和 Cc: 的行数超过了 'mew-header-veil-count' 的大小，则会
    自动被掩盖(需要'mew-use-header-veil'为t);

`M-l'
    类似 C-l，使某封邮件居中;

`C-cC-s'
    向前渐进式搜索 Message mode 里的内容，不用切换到Message 里再C-s;

`C-cC-r'
    向后渐进式搜索 Message mode 里的内容;

`y'
    另存为(部分)邮件内容;

`C-uy'
    另存为(部分)邮件内容，并指定保存编码;

`#'
    打印(根据'mew-print-function');

`C-u#'
    打印(指定打印程序名);

`|'
    将 Messages buffer 的内容(包括邮件头)通过管道送到某个命令里，例如：
    `|' wc -l;

`C-u|'
    同`|'，只是不包括邮件头;

`\'
    执行一个外部命令，并指定此邮件为参数;

`B'
    ???

`C-uB'
    分解内嵌在邮件里的文件;

* 上面两个不明白;
    
`C-cC-a'
    将此邮件的发件人的信息添加进 Addrbook;

`C-uC-cC-a'
    比`C-cC-a'更详细些;

* 以不同的方式添加进 Addrbook，详见下面的 地址自动补全 一节

`C-cC-v'
    选择PGP的版本(看 密码/cipher-viewing 一节);

`C-cC-z'
    让PGP解密并/或验证过时的PGP邮件;

`C'
    切换到另一个账户;

`='
    显示此邮件所在的文件夹名、邮件号等信息;

`;'
    解析邮件头的 Received 部分，并且显示在 Message mode 里;

=====================================================================
更新状态

修改完一些Mew的配置(比如Addrbook)后可以用下面的命令来更新。

`Z'
    更新信息包括Addrbook;

`C-uZ'
    更新当前 world 下邮件文件夹信息;

还有一些如`z8',`zc',`zd',`zo',`zp',`zv',`zw'不太明白是干嘛的。

`z8'
    开关 8bit 模式(i.e. `mew-use-8bit');

`zc'
    清除所有解析邮件的缓存;

`zd'
    开关 `mew-debug';

`zo'
    ???

`zp'
    卷起解码策略(如 'mew-decode-broken')

`zv'
    ??? 'mew-use-header-veil'

`zw'
    更改 Mew警告级别，如果 'mew-warning-field-level' 是 2，则改为 1,反
    之亦然;

* Toggle 暂时将某些功能取消，或者更改吧

======================================================================
无效的邮件

如果邮件头 Content-Type 的 charset 定义为 UTF-8，而邮件正文是用gb2312
编码的，结果就是显示乱码，这时候可以用 `C-cC-l' 来让 Mew 猜测合适的编
码。也可以通过 `C-uC-cC-l' 来收工指定编码，通常这个更有效。

Mew 会在邮件头给出出错提示，类似：

     X-Mew: Charset for body is not specified.
            To: has encoded-words in quoted text.

Emacs 22 用由于只支持 GB2312，但如果收到的邮件是GBK编码的话，那就是部
分乱码，那么你可以 `C-uC-cC-l' 来指定用 cn-gb-2312-dos 来正确显示。

* 邮件头中只能使用 ASCII，因此像中文、日文等就需要编码了，全部用 ASCII
  表示，最终由客户端解析成某国文字。例如：

      From: =?iso-2022-jp?B?GyRCOzNLXE9CSScbKEI=?= <kazu@example.net>

  =? 和 ?= 之间的就是日文，iso-2022-jp 则是说明原始编码, ?B? 是一种
  MIME 编码类型，决定如何将别的编码转换成 ASCII;

* 上面这串不能被双引号括起来，否则无法被正确解析;

======================================================================
撰写邮件

按`M-x mew-send', `C-xm',或在 Summary Mode 下按 'w' 进入 Draft mode 写
新的邮件。"----"上面的是邮件头，下面的是邮件正文。

草稿暂时保存在+draft里，你可以同时写几封邮件，撤销草稿按`C-cC-q'。

======================================================================
邮件头自动补全

写新邮件时，Mew中一共有三个地方可以自动完成：
1. 在 To:, Cc: 等输入 email 地址时;
2. 输入新的一个头信息时，比如输入 Cc: , Reply-to: ;
3. 文件夹，Fcc: +b`TAB' -> Fcc: +backup ;

在 To:, Cc: 里输入"用户名@"后按C-cTAB，Mew会自动根
据 'mew-mail-domain-list' 插入一个域名，在不同的域名间循环;
如：

     To: kazu@`C-cTAB'  --> To: kazu@example.org
     To: kazu@example.org`C-cTAB'  --> To: kazu@sohot.jp

可以在 'mew-mail-domain-list' 设置列表

在 From: 中按C-cTAB则是切换不同的账户作为发信人，可在 mew-from-list 里
设置;
如：
     From: Kazu Yamamoto <kazu@example.org>`C-cTAB'

becomes as follows:

     From: Kazuhiko Yamamoto <kazu@example.jp>

======================================================================
地址自动补全

在To:, Cc: 中输入email时，按TAB会自动完成地址。Mew 会下面三个地方收集
自动完成信息：

  1. The expansion rule in an address book
  2. The personal information in the address book
  3. Learned addresses when sending

* 1 和 2 是地址薄(~/Mail/Addrbook) 里的两种格式; 3 则是保存在
  ~/Mail/.mew-alias 里，格式由 `mew-use-full-alias' 决定;

Mew 中的 'mew-use-full-alias' 变量控制补全的方式. Mew 默认采用 nil.

* 如果值为 'nil'，.mew-alias 这个文件由一个 short name 和 email 地址这样
  的一对对组成。文件里的 short name 就是 email 地址 @ 前面的部分;

  它对应的地址完成(补全)依据是：
  根据所有三种来源的 short name。
  插入的 email 地址由 short name 对应的地址格式决定，见后一节;

  这种方式允许一个用户名拥有多个地址, 但用户必须唯一;

* 如果值为 't'，.mew-alias 仅仅由一个个 email 地址组成。

  它对应的地址完成(补全)依据是：
  根据第1、2中来源的 short name 和 第3中的完整 email 地址。
  如果 short name 补全了，按 'TAB' 是出不来 email 地址的，必须按
  'M-C-e' 来插入。而且，对于第一种地址格式，能够插入 short name 对应的
  全部地址，但是对于第二中地址格式，只能插入第一个地址，后面的是无法出
  来的;

  这种方式允许存在多个相同用户名的email地址;

* 上面所提到的用户名唯一或者存在多个相同用户名的email地址 都是指的
  .mew-alias 而言。对于 't'，如果你的 .mew-alias 如下：

  (("zhangweiwu@realss.com")
  ("zhangweiwu@xx.com")
  ("zhangweiwu@yy.com"))

  那么，在地址完成时 Mew 会列出这三个。

  如果是 'nil'，则若出现如下情况：

  (("zhangweiwu" "zhangweiwu@realss.com")
  ("zhangweiwu" "zhangweiwu@xx.com")
  ("zhangweiwu" zhangweiwu@yy.com"))

  那么只有一个是有效的。

* 总得来说，一般用 'nil';

======================================================================
地址簿

Mew 有两种地址格式, 可共存，保存在 ~/Mail/Addrbook .

* 下面两种格式中，如果 email 地址只有 @ 前面部分(如 myname)，那么在地址自动完成时
  会根据 `mew-mail-domain' (如 xx.com)自动给你添上，结果为 myname@xx.com。

1.
<shortname>: <address1>[, <address2>, <address3>,...]

例子:
pooh:    xxx@yyy.com, yyy@zzz.com
piglet:  zzz@www.com
foobar:  pooh, piglet

* 只能在自己的格式中组合，也就是上例中的 foobar 后面项不能是下面第2种
  格式中定义的 short name;

* foobar 不能只组合一个 short name，原因见上上个 "*";

* 如果一个 short name 有多个 email 地址，那么输入这个 short name 补全
  时，Mew 会插入所有的地址;

2.
<shortname> <address1>[, <address2>, <address3>,...] <nickname> <fullname>

例子:
     kazu    kazu@example.org, kazu@example.net    Kazu-kun    "Kazuhiko Yamamoto"

方式1就像对某一类地址的集合, 方式2则是更完整的个人信息.
Mew 允许多个地址, 用',' 分隔就行.

<shortname> 是用来自动补全的;
<addressN>  在补全时按TAB则会一个个显示;
<nickname>  则是在 Summary Mode 里的发信人, 而不是email地址, 或者是
            Draft Mode 引用前缀;
<fullname>  完整姓名;

* 允许用双引号括起含有空格的信息


看下面的例子:
     *       kazu@example.org, kazu@example.net    Kazu-kun


Mew 允许你不填写地址的某部分, 但这样就无法补全了(除非
`mew-use-full-alias' 为 t).


地址簿中允许注释:
';' 只能是在行首;
'#' 任意位置至行末为注释;
'\' 续行;

Summary Mode 里可以直接把发信人地址添到 Addrbook 里.
`C-cC-a'
	将发信人以第 1 种地址格式注册到 Addrbook;

`C-uC-cC-a'
	将发信人以第 2 种地址格式注册到 Addrbook;

`C-cC-c'
	确认保存;

`C-cC-q'
	取消;

如果想在 Addrbook 里使用多种语言, 请在文件第一行加入下面的语句:
#-*-coding:ctext;-*-

(貌似不加也可以)

======================================================================
学习地址

Mew 会从你发送的邮件中的 To: 和 Cc: 里学习并注册地址。例如：

     To: kazu@example.org

在 地址完成(1) 中，"kazu" 被自动注册为地址 "kazu@example.org" 的 short
name。如果已经存在了一个 kazu，那么根据
`mew-addrbook-override-by-newone'，如果是 `nil' 则保留旧的，否则覆盖。
当扩展地址时，地址薄里的 short name 比这些 automatic short name 优先级
高，只有地址薄里没有时，他们才有效。

在 地址完成(2) 中，被注册的是 "kazu@example.org" 这个项目。

* 这些自动注册信息保存在 ~/Mail/.mew-alias 里，(1) 是 short name 加上
  email 地址; (2) 则仅仅是一个 email 地址;

`mew-lisp-max-length' 规定了 automatic short name 的上限为 2000,超过了
这个数，Mew 会根据字母表序，从尾部删除旧的。

`M-a' 可以打开 ~/Mail/.mew-alias，像平常一样编辑它，修改或去掉你不需要
的项目，'C-xC-s' 后 Mew 会更新配置。

`mew-use-full-alias' 决定了使用哪种地址完成，'nil' 是 (1), 't' 是
(2). 当你改变了这个变量的值，请在 Summary Mode 里用 'Z' 正确转换格式。

??? 还不清楚如何正确转换格式。

======================================================================
地址完成(1)

'mew-use-full-alias' nil

按 TAB 后，会根据一个 alias 对应的 email 地址(>=1) 循环列出，如：

     kazu    kazu@example.org, kazu@example.net    Kazu-kun  "Kazuhiko Yamamoto"

     To: kazu`TAB'  -->  To: kazu@example.org
     To: kazu@example.org`TAB'  -->  To: kazu@example.net

`M-TAB'
     To: kazu@example.org`M-TAB'  -->
     To: Kazuhiko Yamamoto <kazu@example.org>
     补全了完整的信息

如果遇到下面 alias 很相近的情况：
     pooh:           winnie-the-pooh@example.net
     pooh-pooh:      pooh-pooh@example.org

     To: pooh`TAB'
这时，Mew 无法决定是用第一个还是第二个，如果你想用第一个，请加上@，如：

     To: pooh@`TAB'  -->  winnie-the-pooh@example.net

* '@' 可用按键 M-C-e 来代替;

* 如果输入的 short name 对应的是第2种地址格式，那么不断的按 TAB 则是循
  环地插入地址池中的一个地址，而不是全部;

* `M-TAB' 能使地址变成如下格式(全名+地址)：

     To: Kazuhiko Yamamoto <kazu@example.org>

======================================================================
地址完成(2)

'mew-use-full-alias' t

按 TAB 后，会先完成存在的一个 alias，然后补全它对应的一个 email。

如果出现上述 pooh: pooh-pooh: 的情况，也是通过 @ 或者 M-C-e 完成。

======================================================================
发送邮件

`C-cC-m'
        写完一封信后，放入 +queue 或 +postq，而不是立即发送;

* 你可以利用这个，看看邮件的头信息是否正确

`C-cC-c'
        发送信件，Mew 会做出提示;

`mew-ask-subject'
        如设为 t，Mew 会在邮件标题为空时提示你，你仍然可以让它为空; 如
        设为 nil，则不管，默认是 nil;

`mew-ask-fcc'
        同上，只是建立文件夹否;

* 历史上，发送 email 是不用输入验证密码，这很不好. 现在都需要验证密码
  了.

发送 +queue 或 +postq 里的邮件，有下面两种方法：
`i'
        根据 'mew-auto-flush-queue' 的设置为 t，Mew 会在按下 'i' 后收
	信以及发送队列中的邮件;

`C-cC-c'
        选择邮件后直接发送，如果 'mew-auto-flush-queue' 为 t，Mew 会询
        问你，默认是 nil;

======================================================================
签名和引用

* 签名

你可以在~/.signature（默认）定义自己的签名。可以通过如下方式改变签名文
件的位置：
        (setq mew-signature-file "~/Mail/signature")

`C-cTAB'
        在 Message Mode 下的当前光标处插入你自己的签名，根据
	'mew-signature-as-lastpart' 和 'mew-signature-insert-last'，改
	变签名插入的地方;
	'mew-signature-insert-last' 为 t，则不管在哪儿按的 C-cTAB，签
	名总会出现在邮件正文最后;

* 引用

Summary Mode 对某封邮件按 'a' 或 'A' 后，Emacs 从上至下分割为三个窗格
分别是：Summary Mode、Message Mode、Draft Mode。

Message Mode 显示的是某封邮件的内容，你可以用 'C-@M-w' 来复制部分内容，
然后引用到你的回复邮件时，有下面两种模式：

`C-cC-y'
        如果之前没有 'C-@M-w' 的操作，那么是直接对回复邮件的全部正文引
        用; 'C-uC-cC-y' 则是也引用邮件头;
	如果之前有 'C-@M-w' 的操作，就是对这部分内容作引用;

`C-cC-t'
        仅仅拷贝邮件正文的某些内容，不作任何引用标记;

“引用”就像：

     From: SUMIKAWA Munechika <sumikawa@ebina.hitachi.co.jp>
     Subject: Wine
     Date: Wed, 23 Jul 1997 11:40:50 +0900

     > Hi, it's Sumikawa, the guy who's neat from good morning
     > to good night.
     >
     > Talking about the wonderful wine party, I would propose
     > Cabernet Sauvignon, Bordeaux, '90.

如果高亮不正确，按 `C-cC-l' 重新高亮邮件头和正文。

======================================================================
写 multipart 邮件

进入 Draft Mode 写邮件时，按 'C-cC-a' 添加 multipart。比如，你当前邮件
是 draft/1，那么你邮件的 multipart 内容将全部建立在 ~/Mail/attach/1 这
个文件夹里，当你使用嵌套结构的 multipart 时，其实就是在这个 1 的文件夹
下再建立文件和文件夹。

    To: mew-dist
    Subject: This is header
    X-Mailer: Mew version 6.3 on Emacs 22.3
    ----
    This is the body.

    ------------------------------ attachments ------------------------------
          Multipart/Mixed                                           1/          
         1  Text/Plain(guess)                                         *Cover.txt 
         2  Text/Plain(guess)            vvoodysNewWord               dic.txt    
         3  Multipart/Mixed                                           m/         
    B    3.1  Image/X-Bmp                                               lilyZho..
    B    3.2  Image/Jpeg                                                linux-b..
         3.3                                                            .        
         4  Multipart/Alternative                                     r/         
         4.1  Text/Html(guess)             vvoody.org homepage html     index.h..
         4.2  Text/Plain(guess)            vvoody.org homepage txt      index.txt
         4.3                                                            .        
         5                                                            .          
    --------0-1-2-3-4-5-6-7-8-9----------------------------------------------

"----" 上面的是邮件头;
"----" 到 "attachments" 之间是邮件正文;

"attachments" 是一个特殊的区域，有下面的功能：

`C-p'
        移动光标至同级目录下的前一个文件[夹];

`C-n'
        移动光标至同级目录下的后一个文件[夹];

`C-f'
        到子目录;

`C-b'
        到父目录;

`c'
        在 "." 处添加一个文件，这个文件会真实的拷贝至上述提到的文件夹里;
	可以是远程文件，写法：
	/[user@]/hostname:/filepath

`l'
        在 "." 处添加一个文件，但只是在文件夹里做一个原文件的软链接，
        你以后无法编辑这个添加进来的文件了;

`d'
        删除;

`m'
        在 "." 处创建一个子目录;

* 可以对子目录 'T'，改变 multipart 类型

`f'
        打开附件中的一个文件到 buffer;

`F'
        在 "." 处新建一个文件，而不是现有的文件;

`y'
        在 "." 处链接显示在 Message Mode 中的邮件;
	把显示在 Message Mode 里的邮件作为附件;
	其实就是转发这封邮件;

`e'
        从外部引用一个文件(anon-ftp, ftp, local-file, mail-server, url);

* 用 e 取出的 local-file 不是原文件，???

`a'
        在 "." 处添加音频文件;

`p'
        在 "." 解开某个用户的 PGP 钥;

`D'
        对已添加的某个文件增加注释(Content-Description)，上述例子中的
        "vvoodysNewWord" 等都是;

`T'
        改变数据类型(Content-type:)，就是 text/plain 这种;

`t'
        对文件的数据类型在 text 和 binary 间切换;

`I'
        为 Text/* 的文件指定一个输入编码(原始文件的编码);

`C'
        为 Text/* 的文件指定一个输出编码(Mew 用来传输的编码);

* 'I' 和 'C' 改变的是上述例子中 (guess) 的部分

`P'
        重命名添加进的文件的文件名(Content-Disposition:);

每个 multipart 所在行由下面几个部分组成：

   - marks (Content-Transfer-Encoding:)
   - part number
   - data type (Content-Type:)
   - description (Content-Description:)
   - file name (Content-Disposition).

'e' 的作用不太明白，貌似喝 ftp 有关。???

最后，如果你不想要 multipart(附件) 了，回到 "1/" 处，按 'd'

======================================================================
指定编码

Mew 能改变附件的编码，'I' 改变导入文件的编码，使 Emacs 能正确显示文件;
'C' 则是改变文件发送时的编码，Mew 可能有时无法判断文件的编码，由你来指
定。

Emacs 会把文件转换成他能识别的内部格式，中文是 gbk。那么 Unix 系统上常
见的 UTF-8 的中文文件，在 Emacs 内部都是用 gbk 表示的。Mew 也有他自己
的一套机制来判断发送文件的编码。那么 Mew 会把一个 UTF-8 的中文文件以
gb 编码的形式进行 MIME 编码后发出去。

Emacs 23 会支持 Unicode 吧。

======================================================================
处理长行

写信时一行太长了需要手动去换行，这就破坏了写信的快感。当然你可以用
`auto-fill-mode' 来达到自动换行，但 Mew 就提供了类似功能，折行似乎更合
理。

`mew-flowed-fold-threshold'

	决定折行的度量，默认是 78 个字符;

`mew-flowed-fold-length'

	折行的行长，默认是 70 字符;

`C-cC-f'
	找出长行并折行; 再按一次是撤销折行;

`_'
	Summary Mode 下看邮件时，对长行进行折行处理;

`mew-use-format-flowed'
`mew-flowed-auto-wrap'

======================================================================
回信及决定收信人

在 Summary Mode 里按 'a' 或 'A' 回信时，To:, Cc:, Newsgroups: 根据下面
三种情况指定：

  1. 如果带 'C-u'，只回复给 sender/poster，就是没有 Cc:，这种情况根据
  `mew-reply-sender-alist';

  2. 如果发信人是你自己，你可能打算用原来的信头回复，那个依据
  `mew-reply-fromme-alist';

  3. 除去上述两种情况，按照 `mew-reply-all-alist';

默认的 `mew-reply-sender-alist' 是：

     '(("Reply-To:"
        ("To:" "Reply-To:" "From:"))
       (t
        ("To:" "From:")))

意思是：

  1. 如果 Reply-To: 存在，复制 Reply-to: 和 From: 的内容至新的 To: ;

  2. 否则，复制 From: 的值到新的 To: .

如果你只想回复 Reply-To: 里的人，那么可以改成：

     (setq mew-reply-sender-alist
           '(("Reply-To:"
              ("To:" "Reply-To:"))
             (t
              ("To:" "From:"))))

默认的 `mew-reply-fromme-alist' 是：

     '((t
        ("To:" "To:")
        ("Cc:" "Cc:")
        ("Newsgroups:" "Newsgroups:"))))

意思是：

  1. 分别复制原来的 To:, Cc:, Newsgroups: 到新的 To:, Cc:, Newsgroups:

默认的 `mew-reply-all-alist' 是：

     '((("Followup-To:" "poster")
        ("To:" "From:"))
       ("Followup-To:"
        ("Newsgroups:" "Followup-To:" "Newsgroups:"))
       ("Newsgroups:"
        ("Newsgroups:" "Newsgroups:"))
       ("Reply-To:"
        ("To:" "Reply-To:" "From:")
        ("Cc:" "To:" "Cc:" "Apparently-To:"))
       (t
        ("To:" "From:")
        ("Cc:" "To:" "Cc:" "Apparently-To:")))

意思是：

  1. 如果 Followup-To: 是 "poster"，那么复制 From: 到新的 To: ;

  2. 如果 Followup-To: 存在，复制 Followup-To: 和 Newsgroups: 到新的
  Newsgroups: ;

  3. 如果 Newsgroups: 存在，复制 Newsgroups: 到新的 Newsgroups: ;

  4. 如果 Reply-To: 存在，复制 Reply-To:, From: 到新的 To:，复制 To:,
  Cc:, Apparently-To: 到新的 Cc: ;

  5. 否则，复制 From: 到新的 To:，复制 To:, Cc:, Apparently-To: 到新的
  Cc: .

你可能想把 `mew-reply-all-alist' 设置成：

     (setq mew-reply-all-alist
           '((("Followup-To:" "poster")
              ("To:" "From:"))
             ("Followup-To:"
              ("Newsgroups:" "Followup-To:"))
             ("Newsgroups:"
              ("Newsgroups:" "Newsgroups:"))
             ("Reply-To:"
              ("To:" "Reply-To:"))
             (t
              ("To:" "From:")
              ("Cc:" "To:" "Cc:" "Apparently-To:"))))

如果有多个相同的地址，他们会被 unified 。地址以 ":;" 结尾，暗示匿名收
信人，会被自动删除。???

你的地址会被自动删除，你的地址会根据 `mew-mail-address-list' 来指定，
例如 `mew-config-list'。如果你不喜欢这个值，你也可以像这样设置：

     (setq mew-mail-address-list
            '("^pooh@[a-z]*.example.org$"
              "^pooh@example.net$"
              "^winnie@example.jp$"))
???

上面提到的 3 个 reply 变量默认就很好用了，不需要改变。
* 如果有 Reply-To: 似乎改成只回复给 Reply-To: 的人比较礼貌。

======================================================================
转发信件

Summary Mode 下'f' 和 'F' 是转发信件，'F' 是批量转发标记为 '*' 的信件。
之后会自动进入 Draft Mode，原来的信件已经成为了附件。
你也可以手工添加信件作为附件转发，'c', 'l', 'y' 都可以用，如果文件名是
全数字的，会被作为信件处理。

'y' 会将显示在 Message Mode 里的信件转发。

默认整个邮件都会转发，你可能不想全部转发信的所有部分，
`mew-field-delete-for-forwarding' 可以设定哪些部分自动剔除。

     (setq mew-field-delete-for-forwarding '("Received:" "Return-Path:"))

======================================================================
重发邮件

有两种重发邮件的情况：

  1. 你想用某一封信相同的正文(body)、邮件头(header)，但想修改收信人等;

  2. 你想增加 Resent-To: ???;

第一种情况按 'W' 进入 Header Mode，修改 To:, Cc:, From: 等信息，通常用
在 +queue, +postq。

第二中情况按 'r'，增加 Resent-To:, Resent-Cc:, Resent-From:。
Re-sending 可能会迷惑收信人，你用前应该仔细考虑;

Header Mode 一样可以使用地址自动完成，修改完毕后通过 'C-cC-m' 放入
+queue 或 +postq， 或 'C-cC-c' 直接发送。

Header Mode 只能修改 header，body 是不允许修改的。

Resend 有别于 'E';

======================================================================
建立签名或加密信件

先来简单说下签名和加密。根据非对称加密算法生成私钥和公钥各一份，其中生
成私钥需要输入你指定的密码。这两个密钥都需要保管好。

签名就是用你的私钥(需要输入密码)去签名发送文本，然后对方用你的公钥去验
证是不是你本人签的名。

加密则是用别人的公钥去加密发送文本，然后对方收到后用自己的私钥(输入对
方的密码)去解开。

这就是非对称加密，私钥用公钥解，公钥用私钥解。

Mew 中下面几个按键：

`C-cC-s'
     对整个 draft 签名，输入你的私钥密码;

`C-cC-e'
     对整个 draft 加密;

`C-cC-b'
     对整个 draft 签名然后加密，输入你的私钥密码;

`C-cC-e'
     对整个 draft 加密然后签名，输入你的私钥密码;

如果你要加密的，需要对方的公钥。如果你使用了密码缓存或主密码模式，Mew
会暂时对你的密码记忆，你不需要重复输入。见之前的密码一节。

上述的命令默认建立的是 PGP/MIME 邮件。如果你想用 S/MIME，那么做如下配置：

     (setq mew-draft-privacy-method 'smime)

你可以在 Draft Mode 下改变这个变量。

使用什么私钥去签名是根据 From: 的，如果不存在那么你默认的 key 会被采用。
当然，如果你想用非 From: 里的其他私钥地址(私钥需要你拟定一个email地
址)，那么按 `C-uC-cC-s';

加密则是根据 To: 和 Cc: 里面的地址;

签名加密后的邮件都在 +queue/+postq .

很可能你忘了给 draft 签名或加密，为了防止这个的发生，Mew 提供了自动签
名或加密的机制，当你按 `C-cC-m' 或 `C-cC-c' .

如果你想对所有发出的邮件签名，那么设置如下变量：
`mew-protect-privacy-always' to 't'
`mew-protect-privacy-always-type' to 下面中的某个：

下面这些称为 protect privacy

pgp-signature (PS)
     Sign with PGP
pgp-encryption (PE)
     Encrypt with PGP
pgp-signature-encryption (PSPE)
     Sign then encrypt with PGP
pgp-encryption-signature (PEPS)
     Encrypt then sign with PGP
pgp-signature (SS)
     Sign with S/MIME
pgp-encryption (sE)
     Encrypt with S/MIME
pgp-signature-encryption (SSSE)
     Sign then encrypt with S/MIME
pgp-encryption-signature (SESS)
     Encrypt then sign with S/MIME

如果你想都加密回复加密过的邮件，那么设置如下变量：
`mew-protect-privacy-encrypted' to 't'
`mew-protect-privacy-encrypted-type' to 上述中的一个.

当你 `C-cC-m' 或 `C-cC-c' 时，Mew 会显示上述括号中的标记.

在 Draft mode，`C-cC-pC-a' 切换 `mew-protect-privacy-always' 的值，就
是取消还是应用;

`C-cC-pC-e' 则是切换 `mew-protect-privacy-encrypted' .

`C-cC-pC-d' 则是随时改变 protect privacy 的值 .

如果签名或加密失败了，光标会回到 draft，你再发送，则不会进行签名或加密
了。如果还想签名或加密，就按 `C-cC-pC-d', `C-cC-s' 或 `C-cC-e' .

如果 `mew-use-old-pgp' 设成了 't'(默认是 'nil')，Mew 则会用旧式 PGP，
而不是 PGP/MIME，如果由附近，则会出错。

上面提到的 `mew-protect-privacy-*' 只对 PGP/MIME 有效，如果你想用旧式
PGP，那么设置：
`mew-protect-privacy-with-old-pgp-signature' to 't'.

* 收到一封签名的信，在 Message Mode 下按 `C-cC-f' 去第三方网站获取对方
  的公钥，gpg.mit.edu 是个不错的选择。加密邮件还不清楚。

======================================================================
Mark based composer

不太清楚到底干嘛用的。反正下面这些记号会出现在 multipart 邮件里，如：

     ----------------------------- attachments -----------------------------
           Multipart/Mixed                                         1/
          1  Text/Plain(guess)                                       CoverPage*
     B    2  Image/Gif                    MagicPoint logo            mgp.gif
     Q    3  Application/Postscript       Presentation Material      ohp.ps
          4                                                          .
     --------0-1-2-3-4-5-6-7-8-9--------------------------------------------

各记号含义：

`" "'
     无编码，但 8bit 文本会被编码; ???

`B'
     Base64 编码;

`Q'
     Quoted-Printable 编码;

`G'
     Gzip64(先用 gzip 压缩后用 Base64 编码)。这是实验性质的，别用它除
     非对方也是用的 Mew;

`PS'
     经 PGP 签名;

`PE'
     经 PGP 加密;

`SS'
     经 S/MIME 签名;

`SE'
     经 S/MIME 加密;

一些对应的按键：

`B'
`Q'
`G'
`S'
`E'
`M-s'
`M-e'
`U'
     取消标记;

======================================================================
分发 pgp 公钥

要把自己或别人的公钥作为附件发送给别人，那么在 `C-cC-a' 撰写 multipart
时，在 '.' 上按 `p' 就行了。公钥类别将是：Content-Type: Application/Pgp-Keys

如果 Mew 发现收到的邮件某部分是 Application/Pgp-Keys 的话，它会把公钥
加入到你的 pgp 公钥环里的。

======================================================================
带有匿名收信人的邮件

有下面一种情况：
Pooh 想请好几个朋友参加聚会，Piglet 收到后应该只回复给 Pooh，不应该回
复别的朋友(也许他还不认识)，而且 Pooh 也不想暴露参加成员的姓名等信息。
但 Cc: 不能满足，有可能对方回复了全部包括 Cc:，而且 Cc: 里也暴露了信息。

请看下面的邮件头：

     To: party:piglet@example.org,roo@example.org;
     From: Pooh <winne-the-pooh@example.net>

以 "party:" 开头，后面跟你要邀请的朋友的 email，并以 ";" 结束。Piglet
和 Roo 会收到下面样子的邮件：

     To: party:;
     From: Pooh <winnie-the-pooh@example.net>

看，你的目的打到了，收信方知道谁发来的，但不知道还要发给谁。

* 这种写法在 Mew 里是可以的，并且正确发送。但在 GMail 里却是不行的;

======================================================================
标记 Marks

这儿有一串标记可供用户在 Summary Mode 里插入或删除。它们出现在一行的最
开始(注意 Mew 插入的标记显示在日期旁边，如下面的"M").

     D 03/12 Hidenori Ohta  This weekend              |Let's go to StoneMagic
     oM03/14 Momo-chan      The pictures of Noto      |Attached are the pictu
     * 03/15 Neat Sumikawa  Re: wine                  |OK. I vote for Wednesd

现有 6 种：
`U'
     未读;

`D'
     删除;

`X'
     删除;

`o'
     refile mark，移动一个邮件至其他文件夹;

`*'
     target mark;

`$'
     The makr to save another mark temporarily. ???

仅仅对邮件做上标记 Mew 是不会任何事情的，只有按了 `x' 才会去处理打上了
`o', `D', `X' 的邮件.

由 Mew 插入的标记在将在这章讲述.

======================================================================
未读 `U'

做了下面的配置后，Mew 在扫描邮件时会做上未读标记 `U':

     (setq mew-use-unread-mark t)

当你用 `SPC', `n', `p' 等阅读邮件时，`U' 会消失;
这三个命令会逐一阅读被打上 `*', `U' 标记以及没有任何标记的邮件。如果你
按 `zSPC'，则只逐一阅读被打上 `*' 和 `U' 标记的邮件.

当你来到某封邮件前对一封邮件做了某个标记，那么 Mew 会消去当前这封信的
未读标记。但你可能不想立马阅读当前邮件，只是对其他邮件做个标记而已，因
此 Mew 中默认的这个特性会困扰你。不过 Mew 提供了保留未读标记的配置：

     (setq mew-delete-unread-mark-by-mark nil)

下面是跟 `U' 标记有关的命令：

`zSPC'
     切换 `SPC', `n', `p' 等是在被打上 `U', `*' 标记或没有任何标记的邮
     件之间阅读，还是仅仅在被打上 `U', `*' 标记的邮件之间阅读;

`M-u'
     未读当前邮件;

======================================================================
删除 `D' 和 `X'

删除一封邮件只需按 `d'，在按了 `x' 后才会移动邮件至垃圾箱(本地是 +trash，远程是 %trash).

在垃圾箱中真正删除邮件有两种方法：

  1. 在 Summay Mode 下按 `D'，默认是就是情况 [+%]trash .
  2. 对垃圾箱中的邮件打上 `D' 标记，也就是按 `d'，最后按 `x' .

精确地讲，以下规则适用于本地文件夹.
(`mew-trash-folder' 默认是 +trash, `mew-trash-folder-list' 默认是 nil).

   - 如果 `mew-trash-folder' 是 nil，被标记为 `D' 的邮件会被直接删掉，
     而不是移到 trash 里;
   - 如果 `mew-trash-folder-list' 定义了，那么这个列表中被打上 `D' 标
     记的邮件会被直接删掉，而不是移到 trash 里，其他文件夹中则是移到 trash;
   - 如果 `mew-trash-folder-list' 是 nil，那么在 `mew-trash-folder' 中
     被打上 `D' 标记的邮件会被直接删掉。否则是移到 trash (默认).

对于 IMAP，根据 `mew-imap-trash-folder' 和
`mew-imap-trash-folder-list' 适用于上述规则.

还有一种标记 `X'，在按下 `x' 后会直接被删掉。请按 `M-d' .

`d'
     打上 `D';

`M-d'
     打上 `X';

`md'
     将标为 `*' 的通通转为 `D';

`mM-d'
     将标为 `*' 的通通转为 `X';

`x'
     根据打上的标记执行相应操作;

`mxd'
     只处理 `D' 的邮件;

`mxM-d'
     只处理 `X' 的邮件;

`D'
     删除 trash 里的所有邮件;

`C-uD'
     删除指定一个文件夹里的所有邮件;

======================================================================
Refile `o'

Refile 就是将邮件从一个文件夹移到另一个文件夹。Mew 里是按 `o'，并且
Mew 会自动猜测移动的目标文件夹(通常需要自己再修改). 对已标记为 `o' 的
再按 `o' 则会显示他即将被移动至的文件夹名称.

* +parent/son 形如这样的文件夹名是父子文件夹;
* +folder1,+folder99 可移动至多个文件夹;

如果你的系统支持硬链接(hard link)，像上面这种移到多个文件夹的，那么第
一个文件夹里的邮件是真实的邮件，其他的则是它的硬链接.
如果你的系统不支持硬链接，那么则是一个个的复制过去.

如果 refile 的文件夹就一个，并且就是当前文件夹的话，那么啥也不做; 如果
目标文件夹多于两个，并且也包括当前文件夹的话，那么保留当前文件夹中邮件
的副本，并在其他文件夹中创建它的硬链接(或者直接复制).

Mew 还提供 `c' 命令，和 `o' 很像，只是它会将当前文件夹作为 refile 的目
标文件夹之一.

`o'
     打上 `o';

`c'
     打上 `o'，并且把当前文件夹作为 refile 之一;

`mxo'
     只 refile 打上 `o' 的邮件;

`C-umxo'
     只 refile 打上 `o' 标记，并且目标文件夹就是当前文件的邮件;

* 更详细有关 refile 的请参考后面章节.

======================================================================
目标标记 Target `*'

打上 `*' 标记的邮件是你想要 review 的(就是批量做些什么). `?' 命令同样
会打上 `*' 记号(详见 搜索).

`*'
     打上 `*';

`N'/`P'
     仅在 `*' 的邮件中移动查看;

`ma'
     对所有未打上标记的邮件打上 `*';

`mr'
     对匹配某个正则表达式的邮件打上 `*';

`*'
     标记是用来处理多封邮件的，下面是处理多封邮件的命令：

`F'
     以 MIME 格式转发被打上 `*' 标记的邮件;

`J'
     一封 Content-Type: 是 Message/Partial 的大邮件可能会被分割成几部
     分，Mew 会在这些邮件前打上 `P' 记号。???

`mI'
     收取标为 `*' 的截断邮件(标为 `T')的剩余部分;

`C-umI'
     同 `MI';

`M-b'
     De-capsulate messages embedded in the messages marked with `*'; ???

`M-\'
     对打上 `*' 的邮件执行外部命令;

`M-t'
     Apply "uudecode" on messages marked with `*'; ???

======================================================================
Escape `$'

设想，你想对满足 `/' 命令结果的邮件打上 `*'，但如果已经有一些打上 `*'
的邮件，两者会混合。因此，你希望当前 `*' 的邮件不要影响到现在的操作.

这种情况下，标记 `$' 就有用了:

  1. 把 `*' 换成 `$'，按 `m$';
  3. 取消所有 `*' 标记，按 `U*';
  4. 让原来的 `*' 继续打上 `*'，按 `m*'.

`m$'
     `*' -> `$';

`m*'
     `$' -> `*';

======================================================================
删除标记

`u'
     取消当前邮件上标记;

`U'
     取消所有某类标记;

`M*'
     ???;

======================================================================
覆盖标记

标记间可以互相覆盖，有如下几种行为：

`o', `D', `X'
     对没有标记的邮件标记后会显示接下来的一封邮件; 如果是覆盖别的标记
     则光标停留在原邮件处;

`*', `$'
     停留在原处;

`U'
     停留在原处;

你可以用下述命令来交换标记：

`m$'
     `*' -> `$' :: 暂时保留原来的 `*' 标记;

`m*'
     `$' -> `*' :: 让原来的 `*' 回来;

`ms'
     `$' <-> `*';

`mM-u'
     `*' -> `U';

`md'
     `*' -> `D';

`mM-d'
     `*' -> `X';

`mo'
     `*' -> `o'

`e'
     交换两种记号，比如原来有几封标为 `*' 的，你可以换成别的; 对 `o'
     不适用;

======================================================================
与 IMAP 服务器端标记保持一致

Mew 可以与 IMAP 服务器保持下列标记的一致：

`U'
     邮件是否已读。IMAP flag 是 \Seen。仅在 %inbox 有效;

`*'
     Review mark. IMAP flag 是 \Flagged.

* Review mark 不知咋翻;

为了允许离线操作，每当用户做出一个操作，Mew 与 IMAP 服务器端同步标记。
Mew 不会自动地重复同步标记。下面是 Mew 如何同步标记的：

  1. `s' + 'update
        - 把当前文件夹中改动的标记信息同步至服务器;
        - 对于新到邮件，把服务器端的标记传给它们;

  2. `x'
        - 把服务器端的标记信息同步给当前文件夹;

  3. `s' + 'sync
        - 对现有邮件中标记被改过的标记信息传给服务器;
        - 清除当前文件夹中所有的 `*', `U', `$' 标记;
        - 把服务器端的标记信息同步给当前文件夹;
        - 删除已在服务器端删除了的邮件;

* 当前文件夹指的是 %inbox, Mew 会在本地有个远程服务器邮箱中的拷贝，然
  后在这个本地和远程文件夹之间同步信息;

======================================================================
离线处理 IMAP 的标记



======================================================================
Mew 的显示标记

Mew 会在 Summary Mode 里插入一些特殊的标记，来表示邮件类型：

`M'
     Mulitpart 邮件;

`T'
     由于邮件太大被 Mew 截断或者是 IMAP 只收邮件头;

`S'
     签名邮件;

`E'
     加密邮件;

`P'
     分段邮件;???

`#'
     无效邮件;

* 具体分别参考：multipart, retrieving, cipher-viewing, cipher-viewing,
  target mark, off-line;

======================================================================

